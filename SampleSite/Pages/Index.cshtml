@page "/"
@inject Toolbelt.Blazor.Gamepad.GamepadList GamePadList
@using Toolbelt.Blazor.Gamepad

<p>@DateTime.Now</p>
<p>Game Pad List (@Gamepads.Count())</p>
<ul>
    @foreach (var gamePad in Gamepads)
    {
        <li>@gamePad.Index - [@gamePad.Id]</li>
    }
</ul>

<p>Axes</p>
<ul>
    @foreach (var ax in Axes)
    {
        <li>@ax.ToString("#,0.0")</li>
    }
</ul>

<p>Buttons</p>
<ul>
    @foreach (var button in Buttons)
    {
        <li>@button.Pressed (@button.Value)</li>
    }
</ul>

@functions {

    IEnumerable<Gamepad> Gamepads = new Gamepad[0];

    IReadOnlyList<double> Axes = new double[0];

    IReadOnlyList<GamepadButton> Buttons = new GamepadButton[0];

    protected override async Task OnInitAsync()
    {
        this.Gamepads = await GamePadList.GetGamepadsAsync();
        WatchLoop();
    }

    public async Task WatchLoop()
    {
        try
        {
            await Task.Delay(200);

            this.Gamepads = await GamePadList.GetGamepadsAsync();

            var gamePad = this.Gamepads.FirstOrDefault(pad => pad.Id == "ffff-0000-Gamepad ");
            if (gamePad != null)
            {
                //Console.WriteLine("REFRESHED!");
                this.Axes = gamePad.Axes;
                this.Buttons = gamePad.Buttons;
            }
            this.StateHasChanged();
            WatchLoop();

        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
            throw;
        }
    }
}